// Imports:
var UniversalSimpleVote = artifacts.require('./UniversalSimpleVote.sol');
var UniversalSchemeRegister = artifacts.require('./schemes/UniversalSchemeRegister.sol');
var UniversalSimpleContribution = artifacts.require('./schemes/UniversalSimpleContribution.sol');
var OrganizationsBoard = artifacts.require('./schemes/OrganizationsBoard.sol');
var Controller = artifacts.require('./schemes/controller/Controller.sol');
var MintableToken = artifacts.require('./schemes/controller/MintableToken.sol');
var Reputation = artifacts.require('./schemes/controller/Reputation.sol');
var SimpleICO = artifacts.require('./schemes/SimpleICO.sol');

// Instances:
var UniversalSimpleVoteInst;
var UniversalGenesisSchemeInst;
var UniversalSchemeRegisterIsnt;
var UniversalSimpleContributionInst;
var ControllerInst;
var OrganizationsBoardInst;
var ReputationInst;
var MintableTokenInst;
var SimpleICOInst;

// DAOstack ORG parameters:
var tokenAddress;
var reputationAddress;

// Universal schemes fees:
var UniversalSimpleContributionFee = web3.toWei(5);

// ICO parameters:
var cap = 50;
var price = 200;
var periodInBlocks = 50000;
var capInWei = web3.toWei(cap);

// Billboard Params
var addToBillboardFee = 5;
var billboardFeeInWei = web3.toWei(addToBillboardFee);

module.exports = function(deployer) {


// Create DAOstack:
		return UniversalSchemeRegisterIsnt.parametersHash(schemeRegister, schemeRemove, UniversalSimpleVoteInst.address);
	}).then(function(hashedParameters) {
		return UniversalGenesisSchemeIsnt.forgeOrg(orgName, tokenName, tokenSymbol,
			 																	founders, initTokenInWei, initRepInWei,
																		 		UniversalSchemeRegisterIsnt.address, hashedParameters,
																				UniversalSchemeRegisterIsnt.address); // Should build updating scheme!!!
	}).then(function (returnedParams) {
		return Controller.at(returnedParams.logs[0].args._controller);
	}).then(function (inst){
		ControllerInst = inst;
		return ControllerInst.nativeToken();
	}).then(function (address){
		tokenAddress = address;
		console.log('logging: ', ControllerInst.address)
		return ControllerInst.nativeReputation();
	}).then(function (address){
		reputationAddress = address;

// Set UniversalSchemeRegister nativeToken and register DAOstack to it:
		UniversalSchemeRegisterIsnt.updateParameters(tokenAddress, UniversalRegisterFee, ControllerInst.address);
	}).then(function (){
		MintableTokenInst.approve(UniversalSchemeRegisterIsnt.address, UniversalRegisterFee);
	}).then(function (){
		UniversalSchemeRegisterIsnt.addOrUpdateOrg(ControllerInst.address, schemeRegister, schemeRemove, UniversalSimpleVote.address);


// Deploy UniversalSimpleContribution:
		return deployer.deploy(UniversalSimpleContribution, tokenAddress, UniversalSimpleContributionFee, ControllerInst.address);
	}).then(function() {
		return UniversalSimpleContribution.deployed();
	}).then(function(inst) {
		UniversalSimpleContributionIsnt = inst;

// Register DAOstack to universal schemes:


/*
		console.log('controller address: ', ControllerInst.address);
		return deployer.deploy(OrganizationsBoard, ControllerInst.address, billboardFeeInWei, 'DAOstack');
	}).then(function () {
		return OrganizationsBoard.deployed();
	}).then(function(inst) {
		OrganizationsBoardInst = inst;
		return GenesisSchemeInst.proposeScheme(OrganizationsBoardInst.address, { from: web3.eth.accounts[0] });
	}).then(function() {
		return OrganizationsBoardInst.controller()
	}).then(function(contAddrssAtOrgBoard) {
		console.log('controller at org board: ', contAddrssAtOrgBoard)
	}).then(function() {
		return GenesisSchemeInst.voteScheme(OrganizationsBoardInst.address, true, { from: web3.eth.accounts[0] });
	}).then(function() {
		return ControllerInst.schemes(OrganizationsBoardInst.address);
	}).then(function(isListed) {
		console.log('is Organization board listed: ', isListed);
	}).then(function() {
		return ControllerInst.nativeReputation();
	}).then(function(repAddrss) {
		return Reputation.at(repAddrss)
	}).then(function(inst) {
		ReputationInst = inst;
		return ReputationInst.reputationOf(web3.eth.accounts[0]);
	}).then(function() {
		return deployer.deploy(SimpleICO, ControllerInst.address, web3.eth.accounts[0], capInWei ,price, periodInBlocks);
	}).then(function() {
		return SimpleICO.deployed();
	}).then(function(inst) {
		SimpleICOInst = inst;
		GenesisSchemeInst.proposeScheme(SimpleICOInst.address, { from: web3.eth.accounts[0] } );
	}).then(function(inst) {
		return GenesisSchemeInst.voteScheme(SimpleICOInst.address, true, { from: web3.eth.accounts[0] });
	}).then(function(inst) {
		return ControllerInst.schemes(SimpleICOInst.address);
	}).then(function(isListed) {
		console.log('is simple ICO board listed: ', isListed);
		*/
	});

};
